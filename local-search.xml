<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo中插入图片的方法</title>
    <link href="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本篇内容主要介绍了Hexo中插入图片常用的几种方法及兼容Typora和Obsidian本地编辑器的方法。</p><h2 id="hexo-asset-image插件安装"><a href="#hexo-asset-image插件安装" class="headerlink" title="hexo-asset-image插件安装"></a>hexo-asset-image插件安装</h2><p>早期的hexo不支持markdown图片显示方法，所以需要<code>hexo-asset-image</code>插件，但是随着hexo的发展，hexo已经支持markdown图片显示语法了。</p><p>但是网上很多方法还停留在安装<code>hexo-asset-image</code>的教程中，事实上这个和hexo的版本有关，使用<code>hexo -v</code>，判断一下hexo的版本，我这里使用的是<code>7.3.0</code>版本，已经不需要使用该插件了。</p><p><em><strong>问题提示</strong></em></p><p>如果按照原有的教程进行安装，在安装<code>hexo-asset-image</code>会遇到以下问题</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/hexo_asset_image%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png" alt="安装hexo-asset-image遇到的问题"></p><p>npm audit是在提示该安装包有版本适配的问题，按照网上的一些说明，这个问题并不能够直接解决，事实上仍旧是安装失败，所以是存在问题的。</p><p>在这个状态下，如果继续安装hexo使用流程，运行基本文件，会发现图片无法正常显示，在本地hexo目录下public子文件夹中，查看发布的.html文件，会发现链接的图片地址是这样的：</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8F%90%E7%A4%BA.png" alt="路径错误提示"></p><p>原有代码是这样的:（这也是几种常用的图片引用方式）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片引用方法一</span>](<span class="hljs-link">test.png</span>)<br><br>![<span class="hljs-string">图片引用方法二</span>](<span class="hljs-link">test.png</span>)<br><br>![<span class="hljs-string">图片引用方法三</span>](<span class="hljs-link">test/test.png</span>)<br><br></code></pre></td></tr></table></figure><p>如果已经走到这一步了，就使用以下命令<code>npm uninstall hexo-asset-image</code>卸载，再clean后重新生成运行即可。</p><h2 id="目前常用插入图片的方法"><a href="#目前常用插入图片的方法" class="headerlink" title="目前常用插入图片的方法"></a>目前常用插入图片的方法</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><h4 id="方法一：全局资源文件夹"><a href="#方法一：全局资源文件夹" class="headerlink" title="方法一：全局资源文件夹"></a>方法一：全局资源文件夹</h4><p>把所有的图片放到一个文件夹中统一管理，优点是比较简便，且多篇文章引用同一个图片时比较方便；缺点是文章很多时，管理不方便。</p><p>具体操作方法是在source目录下新建一个image（类似）的目录，文档内使用图片直接就<code>![图片](/images/test.png)</code>引用图片。</p><h4 id="方法二：文章资源文件夹"><a href="#方法二：文章资源文件夹" class="headerlink" title="方法二：文章资源文件夹"></a>方法二：文章资源文件夹</h4><p>对于每篇文章，使用一个文件夹管理资源，当文章很多时，可以进行结构化管理。</p><p>需要进行的操作如下：</p><ol><li>修改hexo文件夹中<code>_config.yml</code>文件如下<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <br><span class="hljs-attr">marked:</span> <br><span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span> <br><span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li>在hexo目录中使用<code>hexo new [layout] &lt;title&gt;</code>命令创建文档，layout可以不写，先使用默认，此时在source&#x2F;_post中默认创建一个md文件和一个同名文件夹，后者用来存放图片。</li></ol><h5 id="在该方法下链接方式"><a href="#在该方法下链接方式" class="headerlink" title="在该方法下链接方式"></a>在该方法下链接方式</h5><p>常见的可以用以下语句使用图片：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片引用方法一</span>](<span class="hljs-link">test.png</span>)<br><br>![<span class="hljs-string">图片引用方法二</span>](<span class="hljs-link">test.png</span>)<br><br>![<span class="hljs-string">图片引用方法三</span>](<span class="hljs-link">test/test.png</span>)<br></code></pre></td></tr></table></figure><p>这三种方式在最后都可以在hexo server中显示，但是只有第三种方式可以兼容typora和obsidian本地编辑器（前提图片是放在同名目录下），所以使用第三种方式比较好。</p><p>不过三者运行之后的html文件内容是不一样的，显示效果也是第二种比较好看，有明显的style设计</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E8%BF%90%E8%A1%8C%E5%90%8E%E7%9A%84html%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" alt="前台html文件图片路径"></p><p>第一种和第三种被解析成img格式，第二种被解析成p格式。</p><p><em><strong>如何实现typora中使用第三种方式，而页面显示中是第二种方式</strong></em></p><p>理论上，hexo对markdown的支持，体现在<code>hexo-renderer-marked</code>插件中，但是对插件中js文件进行分析，发现这个插件并没有直接作用于第三种引用方式；</p><p>于是我想到，可以自己写一个脚本文件，在hexo g时运行，通过程序把第三种引用方式解析第二种，于是在根目录下创建了<code>scripts/fix-image-paths.js</code>文件，添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;before_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Original content:&#x27;</span>, data.<span class="hljs-property">content</span>);<br>  <span class="hljs-comment">// 替换指定的 Markdown 图片路径</span><br>  data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/!\[(.*?)\]\(test\/test.png\)/g</span>, <span class="hljs-string">&#x27;![$1](test.png)&#x27;</span>);<br>  <span class="hljs-comment">// 打印替换后的内容</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Modified content:&#x27;</span>, data.<span class="hljs-property">content</span>);<br>  <span class="hljs-comment">// 返回修改后的数据</span><br>  <span class="hljs-keyword">return</span> data;<br>&#125;, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>发现打印的结果是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Original content:<br>这是一篇测试文章<br>![图片引用方法二](test.png)<br>![图片引用方法三](test.png)<br>Modified content:<br>这是一篇测试文章<br>![图片引用方法二](test.png)<br>![图片引用方法三](test.png)<br></code></pre></td></tr></table></figure><p>这说明，在执行该脚本文件之前，hexo某个脚本已经将第三种引用方式<code>![图片引用方法三](test/test.png)</code> 解析成了第一种引用方式<code>![图片引用方法三](test.png)</code>，此时再进行<code>fix-image-paths.js</code>的操作是没有意义的，因为没有目标对象，因为不确定到底是在哪个脚本文件中执行了这个操作，因此反其道而行之，把<code>![图片引用方法三](test.png)</code>，也就是第一种引用方式变成第二种<code>![图片引用方法三](test.png)</code>，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;before_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">// 打印原始内容，调试用</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Original content:&#x27;</span>, data.<span class="hljs-property">content</span>);<br>  <span class="hljs-comment">// 替换已经被转换为 &#123;% asset_img %&#125; 的标签，转回标准 Markdown 格式</span><br>  data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/![(.*?)]((.*?))/g</span>, <span class="hljs-string">&#x27;![$2]($1)&#x27;</span>);<br>  <span class="hljs-comment">// 打印修改后的内容，调试用</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Modified content:&#x27;</span>, data.<span class="hljs-property">content</span>);<br>  <span class="hljs-comment">// 返回修改后的数据</span><br>  <span class="hljs-keyword">return</span> data;<br>&#125;, <span class="hljs-number">1</span>);  <span class="hljs-comment">// 设置优先级为 1，尽早执行此钩子</span><br></code></pre></td></tr></table></figure><p>经过这里，也可以发现实际上(test&#x2F;test.png)的引用方法是先被转换成hexo传统插入图片方法<code>asset_img</code>，然后再转换成html图片显示格式，有一种可能的方法是可以直接禁用asset_img方法，或者去修改css文件，但是本人功力太差，还是上述方法比较简单快捷。</p><p>这样就可以即保证美观，又能兼容本地 typora 和 obsidian 编辑器了，完美。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[Hexo官网资料](<a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E5%85%A8%E5%B1%80%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">资源文件夹 | Hexo</a>)<br>[关于hexo-asset-image的出错的理解](<a href="https://smallsquare.github.io/Solution-to-insert-pics-in-Hexo/">安装hexo-asset-image导致Hexo插入图片无法显示的解决办法 Solution to insert pics in Hexo when hexo-asset-image is installed - SmallSquare’s Blog</a>)<br>[关于hexo-asset-image插入失败的解决思路](<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法_hexo 文章插入图片失败-CSDN博客</a>)</p>]]></content>
    
    
    <categories>
      
      <category>Tech Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
