<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从底层角度理解引用</title>
    <link href="/2025/02/03/%E4%BB%8E%E5%BA%95%E5%B1%82%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E5%BC%95%E7%94%A8/"/>
    <url>/2025/02/03/%E4%BB%8E%E5%BA%95%E5%B1%82%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E5%BC%95%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>本篇主要从底层角度理解一下引用工作机制。</p><h2 id="C-的引用及与指针的区别"><a href="#C-的引用及与指针的区别" class="headerlink" title="C++的引用及与指针的区别"></a>C++的引用及与指针的区别</h2><p>引用是C++中出现的概念，而指针是C语言中的概念，前者兼容后者（简单的说就是在.c文件中使用引用会报错）</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用的使用示例，核心语法<code>type&amp; ref = type var;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span>&amp; ra = a;<span class="hljs-comment">// 将ra绑定到a</span><br>    <span class="hljs-type">int</span>* p = &amp;a;<br>    <span class="hljs-type">int</span>*&amp; rp = p;<span class="hljs-comment">// 指针也可以有对应的引用</span><br>    ra = <span class="hljs-number">20</span>；<span class="hljs-comment">// 通过ra修改a的值。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>引用的特点：</p><ol><li>引用时必须进行初始化，即创建时就必须绑定到一个变量上。</li><li>引用一旦绑定到某个对象，就无法再修改其指向。</li><li>引用是绑定变量的一个别名，通过引用可以直接修改原变量的值。</li></ol><h3 id="引用与指针"><a href="#引用与指针" class="headerlink" title="引用与指针"></a>引用与指针</h3><p>可以借助指针理解一下引用（关于指针更多的内容见<a href="/2025/01/14/%E5%AF%B9C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%9A%84%E5%BA%95%E5%B1%82%E7%90%86%E8%A7%A3/" title="对C语言指针的底层理解">[对C语言指针的底层理解]</a>）。</p><h4 id="二者的本质区别"><a href="#二者的本质区别" class="headerlink" title="二者的本质区别"></a>二者的本质区别</h4><ul><li><p>指针：指针是一个独立变量，它占据一份内存地址，它存储另一个变量的地址，通过修改它的值，可以让它指向<strong>不同的对象</strong>。</p></li><li><p>引用：引用是一个别名，它是某个变量的另一个名字，它在<strong>语法上</strong>通常不占据内存空间。</p></li></ul><p>以下面的代码为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* p = &amp;x;<br><span class="hljs-type">int</span>&amp; r = x;<br><br>    *p = <span class="hljs-number">10</span>；<br>x = <span class="hljs-number">30</span>;<br>r = <span class="hljs-number">20</span>;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;&amp;r = &quot;</span> &lt;&lt; &amp;r &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;&amp;x = &quot;</span> &lt;&lt; &amp;x &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;p = &quot;</span> &lt;&lt; p &lt;&lt; endl;<br>    <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们使用<code>visual studio</code>对上面代码进行调试，当程序执行到<code>return 0;</code>时，借助调试器观察变量的值，会发现<code>x</code>和<code>r</code>的结果是一样的，说明当执行<code>r = 20</code>时，实际上是修改的<code>x</code>。</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E5%80%BC.png" alt="x和r的结果截图"></p><p>同时，打印结果如下所示：</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E5%9B%BE.png" alt="程序打印结果"></p><p>但是结合编译器反汇编得到的汇编代码，可以发现一个有意思的事情：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-number">00007F</span>F7DA2B658D C7 <span class="hljs-number">45</span> <span class="hljs-number">04</span> <span class="hljs-number">0</span>A <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> mov         dword ptr [x],<span class="hljs-number">0</span>Ah  <br><span class="hljs-type">int</span>* p = &amp;x;<br><span class="hljs-number">00007F</span>F7DA2B6594 <span class="hljs-number">48</span> <span class="hljs-number">8</span>D <span class="hljs-number">45</span> <span class="hljs-number">04</span>          lea         rax,[x]  <br><span class="hljs-number">00007F</span>F7DA2B6598 <span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">45</span> <span class="hljs-number">28</span>          mov         qword ptr [p],rax  <br><span class="hljs-type">int</span>&amp; r = x;<br><span class="hljs-number">00007F</span>F7DA2B659C <span class="hljs-number">48</span> <span class="hljs-number">8</span>D <span class="hljs-number">45</span> <span class="hljs-number">04</span>          lea         rax,[x]  <br><span class="hljs-number">00007F</span>F7DA2B65A0 <span class="hljs-number">48</span> <span class="hljs-number">89</span> <span class="hljs-number">45</span> <span class="hljs-number">48</span>          mov         qword ptr [r],rax  <br><br>*p = <span class="hljs-number">10</span>;<br><span class="hljs-number">00007F</span>F7DA2B65A4 <span class="hljs-number">48</span> <span class="hljs-number">8B</span> <span class="hljs-number">45</span> <span class="hljs-number">28</span>          mov         rax,qword ptr [p]  <br><span class="hljs-number">00007F</span>F7DA2B65A8 C7 <span class="hljs-number">00</span> <span class="hljs-number">0</span>A <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    mov         dword ptr [rax],<span class="hljs-number">0</span>Ah  <br>x = <span class="hljs-number">30</span>;<br><span class="hljs-number">00007F</span>F7DA2B65AE C7 <span class="hljs-number">45</span> <span class="hljs-number">04</span> <span class="hljs-number">1</span>E <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> mov         dword ptr [x],<span class="hljs-number">1</span>Eh  <br>r = <span class="hljs-number">20</span>;<br><span class="hljs-number">00007F</span>F7DA2B65B5 <span class="hljs-number">48</span> <span class="hljs-number">8B</span> <span class="hljs-number">45</span> <span class="hljs-number">48</span>          mov         rax,qword ptr [r]  <br><span class="hljs-number">00007F</span>F7DA2B65B9 C7 <span class="hljs-number">00</span> <span class="hljs-number">14</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>    mov         dword ptr [rax],<span class="hljs-number">14</span>h  <br></code></pre></td></tr></table></figure><ol><li><p><code>x = 30</code>的反汇编代码是 <code>C7 45 04 1E 00 00 00 </code>，其中<code>C7</code>指代<code>mov</code>操作，后4个字节是立即数30，中间的<code>45 04</code>则是<code>x</code>的寻址，是通过指定<code>x</code>在栈中的偏移量的形式获取 <code>x</code>的地址的。</p></li><li><p><code>*p = 10</code>是通过指针的形式修改<code>x</code>的值，它的反汇编程序则分为两句话，首先<code>mov rax, qword ptr [p]</code>，获取<code>p</code>存储的内存地址加载到<code>rax</code>中，再将立即数10存储到<code>rax</code>的地址中。第一句汇编对应的二进制编码是<code>48 8B 45 28 </code>，其中<code>45 28</code>指代<code>p</code>在栈中的位置，从这里可以看出<code>p</code>和<code>x</code>占据两块内存。</p></li><li><p>有意思的是，按照对引用的理解，<code>&amp;r == &amp;x</code>，似乎执行<code>r = 20</code>和执行<code>x = 30</code>应该没有什么区别，但是<code>r = 20</code>的汇编语句实际上与指针赋值的汇编语句是相似的，它的第一句话<code>mov rax, qword ptr [r]</code>，二进制编码是<code>48 8B 45 48</code>，说明在内存中<code>r</code>是占据了一块地址的，这块地址在栈中的偏移量是<code>45 48</code>。</p></li></ol><p>我们还可以通过调试工具的内存信息验证第三条的理解：下图所示，<code>x</code>的地址是<code>0x000000EE98CFFA44</code>，而在这片内存中有两个区域存放了<code>x</code>的地址，第一个区域和<code>x</code>地址的偏移量恰好是0x24，也就是<code>*p</code>的偏移地址和<code>x</code>的偏移地址之间的距离；而第二区域和<code>x</code>地址的偏移量恰好是0x44，也刚好是前面二进制编码信息中<code>r</code>和<code>x</code>的地址的距离。</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E6%81%AF.png" alt="引用和指针的内存信息"></p><p>以上信息说明，尽管在语法上认为引用是原始变量的一个别名，通过直接取地址的方式也只能获取到相同的地址，但是在编译器内部，依旧是通过指针的方式来处理引用的，也就是说本质上引用还是占据了一份内存的，只是这部分内存不会对编程人员开放——这也恰恰说明了引用的优点：<strong>因为无法直接访问内存，使用起来会更加安全</strong>。</p><h4 id="语法和使用差异"><a href="#语法和使用差异" class="headerlink" title="语法和使用差异"></a>语法和使用差异</h4><ol><li>初始化：</li></ol><ul><li>指针创建时可以不进行初始化，支持动态分配。</li><li>引用在创建时必须绑定到一个对象，不能绑定到<code>NULL</code>或者未进行初始化的变量。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p;<span class="hljs-comment">//定义指针变量可以不进行初始化</span><br>p = &amp;x;<br><span class="hljs-type">int</span>&amp; r = x;<span class="hljs-comment">// 定义引用时必须绑定变量。</span><br></code></pre></td></tr></table></figure><ol start="2"><li>重新绑定：</li></ol><ul><li>指针可以随时修改它的值，随时可以指向另一个变量。</li><li>引用一旦绑定一个变量，就无法再更改绑定对象。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> m = <span class="hljs-number">10</span>, n = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span>* p = &amp;m;<br><span class="hljs-type">int</span>&amp; r = m;<br>p = &amp;n; <span class="hljs-comment">// 修改指向，此时p指向n</span><br>r = n;<span class="hljs-comment">// 把n的值赋值给r(m)，此时m=20</span><br>&amp;r = n; <span class="hljs-comment">// 不合法，编译器会报错，因为引用不能更改绑定对象。</span><br></code></pre></td></tr></table></figure><ol start="3"><li>功能差异</li></ol><ul><li>指针具有更高的动态性，可以用于动态内存分配，数组操作。</li><li>引用更适合简化函数参数传递、返回值等场景。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以一个常规的交换例子看一下二者在函数调用时传参的区别：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap_r</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span></span>&#123;<span class="hljs-comment">// 引用传参</span><br>    <span class="hljs-type">int</span> m = x;<br>    x = y;<br>    y = m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap_p</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span></span>&#123;<span class="hljs-comment">// 指针传参</span><br>    <span class="hljs-type">int</span> m = *x;<br>    *x = *y;<br>    *y = m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">10</span>, n = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;m = &quot;</span> &lt;&lt; m &lt;&lt; <span class="hljs-string">&quot;, n = &quot;</span> &lt;&lt; n &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;, b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br>    <span class="hljs-built_in">swap_r</span>(m, n);<br>    <span class="hljs-built_in">swap_p</span>(&amp;a, &amp;b);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;m = &quot;</span> &lt;&lt; m &lt;&lt; <span class="hljs-string">&quot;, n = &quot;</span> &lt;&lt; n &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;, b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对引用的深入理解"><a href="#对引用的深入理解" class="headerlink" title="对引用的深入理解"></a>对引用的深入理解</h2><h3 id="左值与右值"><a href="#左值与右值" class="headerlink" title="左值与右值"></a>左值与右值</h3><h4 id="左值"><a href="#左值" class="headerlink" title="左值"></a>左值</h4><ul><li><p>左值：可以获取地址的值，也就是<strong>在程序运行期间有确定存储位置</strong>的对象。</p></li><li><p>特点：</p><ul><li>可以出现在赋值符号（&#x3D;）的左侧，也可以出现在赋值符号的右侧。</li><li>占据一块存储空间，可以通过取地址符号（&amp;）获取该变量的地址。</li></ul></li><li><p>示例：如下<code>x</code>、<code>p</code> 和数组 <code>arr</code> 都是左值。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p = &amp;x;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><h4 id="右值"><a href="#右值" class="headerlink" title="右值"></a>右值</h4><ul><li>右值：是一个数据的表达式，在程序运行期间没有确定存储位置的临时值，例如字符常量，函数返回值等。</li><li>特点：<ul><li>右值通常是临时的，在程序运行之后会被销毁。</li><li>右值不能出现在等号的左侧，也就是不能被赋值</li><li>不能对右值直接进行取地址（例如不可以写&amp;42）</li></ul></li><li>示例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> y = <span class="hljs-number">5</span>; <span class="hljs-comment">// y是左值</span><br>y + <span class="hljs-number">10</span>;<span class="hljs-comment">// 表达式是左值</span><br></code></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ol><li>左值一般是开发者自定义的变量，在变量创建时就会开辟一块内存，后续可以修改这片内存的值（const定义除外），这块内存在其生命周期结束的时候销毁，例如函数内的变量会在函数运行结束之后销毁。</li><li>右值一般为临时变量，是程序运行间的产物，内存是由编译器开辟的，生命周期通常只在当前语句。</li><li>对于一些常量，会存储在内存的只读区域。</li></ol><h3 id="左值引用与右值引用"><a href="#左值引用与右值引用" class="headerlink" title="左值引用与右值引用"></a>左值引用与右值引用</h3><p>顾名思义，左值引用是对左值的引用，右值引用是对右值的引用。</p><p>左值引用是C++一开始就有的特性，右值引用是C++11才出现的特性。</p><h4 id="左值引用"><a href="#左值引用" class="headerlink" title="左值引用"></a>左值引用</h4><p>左值引用就是对左值的引用，也就是对左值起别名。</p><p>以下代码中，<code>a</code> 、<code>p</code> 、<code>*p</code>都是左值，<code>ra</code>、<code>rpa</code> 、<code>rp</code> 分别是这三个左值的左值引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span>* p = &amp;a;<br>    <span class="hljs-type">int</span> &amp;ra = a;<br>    <span class="hljs-type">int</span>* &amp;rpa = p;<br>    <span class="hljs-type">int</span> &amp;rp = *p;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p = &quot;</span> &lt;&lt; p &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;ra = &quot;</span> &lt;&lt; ra &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;rpa = &quot;</span> &lt;&lt; rpa &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;rp = &quot;</span> &lt;&lt; rp &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 打印结果如下：</span><br>a = <span class="hljs-number">10</span><br>*p = <span class="hljs-number">10</span><br>p = <span class="hljs-number">0x7fffc4046e54</span><br>ra = <span class="hljs-number">10</span><br>rpa = <span class="hljs-number">0x7fffc4046e54</span><br>rp = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h4><p>右值引用就是对右值的引用，即给右值取别名，右值引用的语法为对右值加上两个&amp;。</p><p>以下代码中，<code>10</code>、<code>m+n</code> 和 <code>int_max(m,n)</code>的返回值都是右值，<code>r1</code>、<code>r2</code> 和 <code>r3</code> 分别是这个三个右值的引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">int_max</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x &gt;= y) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">10</span>, n = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span>&amp;&amp; r1 = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span>&amp;&amp; r2 = m + n;<br>    <span class="hljs-type">int</span>&amp;&amp; r3 = <span class="hljs-built_in">int_max</span>(m, n);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;r1 = &quot;</span> &lt;&lt; r1 &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;r2 = &quot;</span> &lt;&lt; r2 &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;r3 = &quot;</span> &lt;&lt; r3 &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 打印结果</span><br>r1 = <span class="hljs-number">10</span><br>r2 = <span class="hljs-number">30</span><br>r3 = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="总结与分析"><a href="#总结与分析" class="headerlink" title="总结与分析"></a>总结与分析</h3><h4 id="如何理解引用的地址"><a href="#如何理解引用的地址" class="headerlink" title="如何理解引用的地址"></a>如何理解引用的地址</h4><p>首先，不管是左值引用还是右值引用，<strong>从语法上来讲</strong>，都是对一段空间取别名。左值引用比较好理解，对左值取引用，能找到一块空间（是定义该左值时开辟的空间），那么对右值引用来说，既然右值不能取地址，那么右值引用是如何绑定一块内存空间的呢？</p><p>前面说过，右值也是有地址的（不能取地址不代表不占据内存），当我们创建一个右值时，理论上程序执行到创建右值的下一句时，这个右值占据的空间就会被释放，而右值引用就是告诉编译器程序员要求继续使用这块空间，从内存的角度上，编译器会开辟一段空间给右值引用，并把这个右值的地址保存到这块空间中。</p><p>因此，<strong>右值引用实际上是一个可以取地址的左值。</strong></p><p>用代码检验一下，能看到既能对右值引用<code>b</code> 取地址，也能通过操作<code>b</code> 修改这块内存上的值。</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E7%94%A8%E5%8F%96%E5%9C%B0%E5%9D%80.png" alt="右值引用取地址"></p><p>还可以去看一下这块内存：</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E7%94%A8%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="右值引用内存图"></p><p>接下来将左值引用和右值引用放在一起做一下对比：</p><p>左值引用和右值引用本质上是相似的，前者是将引用与用户创建的空间绑定在一起，后者是通过引用的方式，保留了原本要被销毁的信息。</p><p>有如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span>&amp; rm = m;<br>    <span class="hljs-type">int</span>&amp;&amp; rr = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-type">int</span>* p = &amp;m;<br>    <span class="hljs-type">int</span>* prm = &amp;rm;<br>    <span class="hljs-type">int</span>* prr = &amp;rr;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>前三行创建左值、左值引用、右值引用对应的汇编如下，可以看出其实 <code>int&amp;&amp; r = 10;</code>和 <code>int m = 10;</code> <code>int&amp; rm = m;</code>本质是一样的，都是开辟一段空间，再把这段空间的地址保存到另一块空间中。</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E6%B1%87%E7%BC%96.png" alt="左值引用与右值引用汇编"></p><p>再根据创建指针这部分的汇编代码观察一下细节，能看出来<code>m</code>和<code>rm</code>本质上在内存中不是同一块地址，同样的<code>rr</code>和没有销毁的右值空间也不是一块地址，但是最后从语法的角度，却能实现<code>&amp;m == &amp;rm</code>，这一任务是由编译器去完成的，程序员只需要牢记<strong>引用是绑定变量的一个别名</strong>即可，而内部的实现还是以指针的形式进行的：即引用在内存中体现为一个指针，c++中对引用取地址时，编译器实际上是获取的这个指针上存储的地址信息。</p><p><strong>总之，左值引用和右值引用都是有额外的一段内存空间的，但是不对程序员开放，也无法对这块内存空间进行修改，这也就解释了为什么引用一旦绑定就无法修改绑定对象。</strong></p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E5%90%91%E5%BC%95%E7%94%A8%E7%9A%84%E6%8C%87%E9%92%88%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81.png" alt="创建指向引用的指针汇编代码"></p><h4 id="引用的互相转换"><a href="#引用的互相转换" class="headerlink" title="引用的互相转换"></a>引用的互相转换</h4><h5 id="左值引用-引用-右值"><a href="#左值引用-引用-右值" class="headerlink" title="左值引用 引用 右值"></a>左值引用 引用 右值</h5><p><strong>添加const关键字即可实现左值引用 引用右值</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; r = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h5 id="右值引用-引用-左值"><a href="#右值引用-引用-左值" class="headerlink" title="右值引用 引用 左值"></a>右值引用 引用 左值</h5><p><strong>通过强制转换的形式实现右值引用 引用 左值</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> m = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* p = &amp;m;<br><span class="hljs-type">int</span>&amp;&amp; rm = (<span class="hljs-type">int</span> &amp;&amp;) m;<br><span class="hljs-type">int</span>*&amp;&amp; rp = (<span class="hljs-type">int</span>*&amp;&amp;) p;<br></code></pre></td></tr></table></figure><p>转换之后，<code>rm</code>指代 <code>m</code>，<code>rp</code>指代<code>p</code>。用以下代码进行一些验证：</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E7%94%A8%E5%BC%95%E7%94%A8%E5%B7%A6%E5%80%BC%E7%A4%BA%E4%BE%8B.png" alt="右值引用引用左值示例"></p><p><strong>std::move转换方式</strong></p><p><code>std::move(a)</code>里面的<code>a</code>无论是左值还是右值，都会被转换成左值。</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/e%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0.png" alt="std::move转换函数"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li>左值引用与右值引用的相同点：<ol><li>都是对一段空间取别名，一旦绑定一段空间，不可以改变绑定对象。</li><li>底层都是指针实现，区别在于语法层面。</li><li>除了使用<code>const</code>关键字，都可以通过直接操作引用来达到改变原始对象的目的。</li></ol></li><li>左值引用与右值引用的不同点：<ol><li>左值引用引用左值，左值可以修改；右值引用引用右值，右值不可以修改</li><li>左值是由用户自定义变量组成，右值一般为编译器运行时开辟临时变量。</li></ol></li></ul><p>最后，因为一直都不理解为什么无法获取引用的地址——怎么会有个变量没有占据内存呢，既然占据了内存就应该能找到地址啊——于是就边学习边整理了本篇的内容。</p><p>但是，引用应该有更多可以深挖的地方，比如在哪些场景可以使用引用而不是指针，此时内存的工作状态是什么样子的；比如各类传参的性能对比；比如右值引用在c++11出现，它的特殊性是什么；比如引用转换函数move的底层实现等等，但这些都需要更复杂的cpp知识，只能边学习边填坑了。</p><p>cpp的魅力无限！（doge）</p>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对C语言指针的底层理解</title>
    <link href="/2025/01/14/%E5%AF%B9C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%9A%84%E5%BA%95%E5%B1%82%E7%90%86%E8%A7%A3/"/>
    <url>/2025/01/14/%E5%AF%B9C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%9A%84%E5%BA%95%E5%B1%82%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>本篇从内存的角度分析C语言指针的使用。</p><p>C语言是相对比较底层的语言，C语言最初主要是为了替代汇编操作硬件而出现的，因此C语言对内存的操作是C语言的一大特点。</p><p>在分析指针使用之前，先说清一个基本的大小端序的概念。</p><h2 id="大端序和小端序"><a href="#大端序和小端序" class="headerlink" title="大端序和小端序"></a>大端序和小端序</h2><ul><li><strong>何为低地址、高地址</strong>：地址编号小的叫做低地址，地址编号大的叫做高地址。</li><li><strong>何为数据的高位、低位</strong>：对于一组十六进制数据：0x11223344，左侧为高位，右侧为低位。</li></ul><blockquote><p>一般我们都是在最小存储单元之间区分高低位，比如在内存中，一个地址存储一个byte的信息，那么对于0x11223344，11和22之间有高低位区分，对于单个存储单元内部的0x11或者0x22，是不需要区分高低位的。</p></blockquote><h3 id="小端序"><a href="#小端序" class="headerlink" title="小端序"></a>小端序</h3><p><strong>数据低位放在低地址，数据高位放在高地址</strong>就是<strong>小端序模式</strong></p><p>在小端序设备中，对于0x11223344这样的数据在内存中的存放方式如下：</p><table><thead><tr><th align="center">内存地址</th><th align="center">存放数据</th></tr></thead><tbody><tr><td align="center">0x00</td><td align="center">0x44</td></tr><tr><td align="center">0x01</td><td align="center">0x33</td></tr><tr><td align="center">0x02</td><td align="center">0x22</td></tr><tr><td align="center">0x03</td><td align="center">0x11</td></tr></tbody></table><p>常见的Arm x86 CPU都是小端序，因此后续所有的内容都会基于小端序进行分析。</p><h3 id="大端序"><a href="#大端序" class="headerlink" title="大端序"></a>大端序</h3><p><strong>数据低位放在高地址，数据高位放在低地址</strong>就是<strong>大端序模式</strong></p><p>在大端序设备中，对于0x11223344这样的数据在内存中的存放方式如下：</p><table><thead><tr><th align="center">内存地址</th><th align="center">存放数据</th></tr></thead><tbody><tr><td align="center">0x00</td><td align="center">0x11</td></tr><tr><td align="center">0x01</td><td align="center">0x22</td></tr><tr><td align="center">0x02</td><td align="center">0x33</td></tr><tr><td align="center">0x03</td><td align="center">0x44</td></tr></tbody></table><p> 以太网发送数据都是以大端序模式发送。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>大小端是CPU层面的概念，它决定了多字节数据在内存中的存储顺序。以汇编为例，假设内存地址<code>bx</code>中存储的值为<code>0xaa</code>，在<code>bx+1</code>中存储的值为<code>0xdd</code>，当要执行<code>mov ax, [bx]</code>时，在小端序中，CPU会自动理解到<code>ax</code>中存储的值为<code>0xddaa</code>，因为低位在低地址（bx），高位在高地址（bx+1）；同样的，在高级语言中，编译器对源文件的处理就需要去适配CPU的大小端序。</p><p>前面说到，大小端的高低位只关注最小存储单元之间的高低位关系，假设程序中所有的操作类型数都是<code>char</code>，那么就不需要关注一个数据在内存中的排列顺序，但是在当下64位系统中，是不可能只去处理<code>char</code>型数据的，因此接下来会结合C语言的基本类型分析一下指针操作对内存的影响。</p><h2 id="指针与内存"><a href="#指针与内存" class="headerlink" title="指针与内存"></a>指针与内存</h2><h3 id="从基本变量开始讲起"><a href="#从基本变量开始讲起" class="headerlink" title="从基本变量开始讲起"></a>从基本变量开始讲起</h3><p>当执行<code>int x = 0xa;</code>这句话时，内存到底发生了什么变化？</p><ol><li>首先，栈中定义了一个变量，并且从内存中开辟了一个4字节（int类型）大小的空间，并把这片空间分配给<code>x</code>。</li><li>在<code>x</code>的这片空间中，会存放一个变量0xa，但是<code>x</code>占据了4个字节的空间，在小端序前提下，这个0xa显然是最低字节，因此会放到<code>x</code>拥有的四个字节的内存空间中最小内存地址的存储单元中，而其他的三个内存空间会写进去0x0。</li><li>此时内存存储应该是这样的：（以64位机为例）</li></ol><table><thead><tr><th align="center">内存地址</th><th align="center">存放数据</th></tr></thead><tbody><tr><td align="center">0x8000_0000_0000_0010</td><td align="center">0x0a</td></tr><tr><td align="center">0x8000_0000_0000_0011</td><td align="center">0x00</td></tr><tr><td align="center">0x8000_0000_0000_0012</td><td align="center">0x00</td></tr><tr><td align="center">0x8000_0000_0000_0013</td><td align="center">0x00</td></tr></tbody></table><p>如果想要修改x的值，可以直接在代码中进行重新赋值操作，同样的，也可以通过使用指针的方式进行间接访问。</p><h3 id="一级指针"><a href="#一级指针" class="headerlink" title="一级指针"></a>一级指针</h3><h4 id="指针的创建规范"><a href="#指针的创建规范" class="headerlink" title="指针的创建规范"></a>指针的创建规范</h4><ul><li>先定义后赋值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p;<br>p = &amp;x;<br></code></pre></td></tr></table></figure><ul><li>定义时完成赋值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p = &amp;x<br></code></pre></td></tr></table></figure><h4 id="指针的存储过程"><a href="#指针的存储过程" class="headerlink" title="指针的存储过程"></a>指针的存储过程</h4><p>像前面创建一个int型变量一样，创建指针也需要开辟一段内存空间，那么创建一个指针需要多少内存空间呢？</p><p>指针变量是存储地址的变量，那么开辟的内存空间至少要能存放的下一个地址，在32位机中，地址32位宽，4个字节，那么指针变量就要开辟4个内存空间，每个内存地址存放1个字节的地址信息；同样的，在64位机中，地址64位宽，那么指针变量就要占据8个内存空间。</p><p>在64位机上可以做如下测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> *p = &amp;x;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(x) = %ld\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(x));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(p) = %ld\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果是这样的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">sizeof</span>(x) = <span class="hljs-number">4</span><br><span class="hljs-keyword">sizeof</span>(p) = <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>因此，在创建指针p之后，内存中会开辟8个内存空间，存放<code>x</code>地址：<code>0x8000_0000_0000_0010</code>，此时在小端序CPU中，p的内存空间是这样的：（假设p的地址是0x8000_0000_0000_1000）</p><table><thead><tr><th align="center">内存地址</th><th align="center">存放数据</th></tr></thead><tbody><tr><td align="center">0x8000_0000_0000_1000</td><td align="center">0x10</td></tr><tr><td align="center">0x8000_0000_0000_1001</td><td align="center">0x00</td></tr><tr><td align="center">0x8000_0000_0000_1002</td><td align="center">0x00</td></tr><tr><td align="center">0x8000_0000_0000_1003</td><td align="center">0x00</td></tr><tr><td align="center">0x8000_0000_0000_1004</td><td align="center">0x00</td></tr><tr><td align="center">0x8000_0000_0000_1005</td><td align="center">0x00</td></tr><tr><td align="center">0x8000_0000_0000_1006</td><td align="center">0x00</td></tr><tr><td align="center">0x8000_0000_0000_1007</td><td align="center">0x80</td></tr></tbody></table><p><strong>总结：</strong></p><p>在这样一段代码中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;       <br><span class="hljs-type">int</span> *p = &amp;x;     <br></code></pre></td></tr></table></figure><ul><li><code>x</code>是一个整数型变量，<code>&amp;x</code>是<code>x</code>的地址。</li><li><code>p</code>是一个整数型指针变量，存储的信息是<code>x</code>的地址。</li><li><code>*p</code>是对指针<code>p</code>的解引用，可以访问<code>x</code>的值。</li></ul><h4 id="不同类型指针的区别"><a href="#不同类型指针的区别" class="headerlink" title="不同类型指针的区别"></a>不同类型指针的区别</h4><p>我们能够创建<code>int  *p</code>，当然也能创建<code>char *p</code>，前面分析到指针变量是用来存储地址的变量，64位机下，所有的指针变量都要有8个内存空间，因此无论是<code>int</code>型指针变量还是<code>char</code>型指针变量，占据的内存空间都是相同的。可以用以下代码进行测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(char *) = %ld\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span> *));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(short *) = %ld\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">short</span> *));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(int *) = %ld\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span> *));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span> *) = <span class="hljs-number">8</span><br><span class="hljs-keyword">sizeof</span>(<span class="hljs-type">short</span> *) = <span class="hljs-number">8</span><br><span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span> *) = <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>那么不同类型的指针常量到底有什么区别呢？——区别在于它们指向的数据类型。</p><p>即：操作不同类型的指针，产生不同的结果，本质上是因为它们指向了不同数据类型的变量。</p><h5 id="数据大小的差异"><a href="#数据大小的差异" class="headerlink" title="数据大小的差异"></a>数据大小的差异</h5><p>以以下代码为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> c = <span class="hljs-number">0x0a</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0x11223344</span>;<br><span class="hljs-type">char</span> *p1 = &amp;c;<br><span class="hljs-type">int</span> *p2 = &amp;i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(*p1) = %ld\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(*p1));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(*p2) = %ld\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(*p2));<br></code></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">sizeof</span>(*p1) = <span class="hljs-number">1</span><br><span class="hljs-keyword">sizeof</span>(*p2) = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><code>p1</code>指向的是一个<code>char</code>类型的数据，只有1字节，因此解引用<code>*p1</code>只访问一个字节的数据；<code>p2</code>指向的是一个<code>int</code>类型的数据，有4字节，因此解引用<code>*p2</code>访问4字节的数据；</p><h5 id="指针偏移的差异"><a href="#指针偏移的差异" class="headerlink" title="指针偏移的差异"></a>指针偏移的差异</h5><p>指针偏移移动的长度由指针指向的数据类型决定。</p><ul><li>对于 <code>char *</code>，每次加 <code>1</code>，移动 1 字节。</li><li>对于 <code>int *</code>，每次加 <code>1</code>，移动 4 字节。</li></ul><p>其他类型以此类推，即移动的地址长度是数据类型所占内存长度</p><p>统一公式：<code>(type *)(p + n)</code>即在<code>p</code>原来指向的地址的基础上增加<code>n * sizeof(type)</code>个地址空间。</p><p><strong>用具体的内存变化分析一下：</strong></p><table><thead><tr><th align="center">内存地址</th><th align="center">存放数据</th></tr></thead><tbody><tr><td align="center">0x8000_0000_0000_0010</td><td align="center">0x11</td></tr><tr><td align="center">0x8000_0000_0000_0011</td><td align="center">0x22</td></tr><tr><td align="center">0x8000_0000_0000_0012</td><td align="center">0x33</td></tr><tr><td align="center">0x8000_0000_0000_0013</td><td align="center">0x44</td></tr><tr><td align="center">0x8000_0000_0000_0014</td><td align="center">0x55</td></tr><tr><td align="center">0x8000_0000_0000_0015</td><td align="center">0x66</td></tr><tr><td align="center">0x8000_0000_0000_0016</td><td align="center">0x77</td></tr><tr><td align="center">0x8000_0000_0000_0017</td><td align="center">0x88</td></tr><tr><td align="center">0x8000_0000_0000_0018</td><td align="center">0x99</td></tr><tr><td align="center">0x8000_0000_0000_0019</td><td align="center">0xaa</td></tr></tbody></table><p>假设有一个<code>int *p1</code>指向<code>0x8000_0000_0000_0010</code>地址，同样有一个<code>char *p2</code>也指向这个地址，那么<code>p1 + 1</code>就指向<code>0x8000_0000_0000_0014</code>这个地址，而<code>p2 + 1</code>指向<code>0x8000_0000_0000_0011</code>这个地址。</p><p>但是实际上使用中因为程序每次运行，内存地址都会发生变化，因此不会直接以常量的形式获取地址，那么如果<code>p1</code>和<code>p2</code>是指向同一个地址，那么意味着它们要绑定同一个变量，但是这个变量只能是一种类型，那么如何绑定到两个不同类型的指针变量上呢？</p><p>这就涉及到<strong>强制类型转换</strong>。可以看下面的代码示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">0x44332211</span>;<br><span class="hljs-type">int</span> *p1 = &amp;a;<br><span class="hljs-type">char</span> *p2 = (<span class="hljs-type">char</span> *)&amp;a;<br></code></pre></td></tr></table></figure><p>假设<code>a</code>的地址就是<code>0x8000_0000_0000_0010</code>，经过以上运算，<code>p1</code>和<code>p2</code>都指向了<code>0x8000_0000_0000_0010</code>这个地址空间。</p><p>此时<code>*p1 = 0x44332211</code>，而<code>*p2 = 0x44</code>，同样的<code>*(p1 + 1) = 0x88776655</code>，因为<code>p1 + 1</code>指向<code>0x8000_0000_0000_0014</code>，而<code>*(p2 + 1) = 0x22</code>，因为<code>p2 + 1</code>指向<code>0x8000_0000_0000_0011</code>。</p><h4 id="一个数组和指针的例子"><a href="#一个数组和指针的例子" class="headerlink" title="一个数组和指针的例子"></a>一个数组和指针的例子</h4><p>接下来，通过一个使用指针访问数组的例子加深一下对这部分的理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x3344</span>, <span class="hljs-number">0x1122</span>, <span class="hljs-number">0xaabb</span>, <span class="hljs-number">0xeeff</span>&#125;;<br><br>    <span class="hljs-type">int</span> *p1 = arr;<br>    <span class="hljs-type">char</span> *p2 = (<span class="hljs-type">char</span> *)arr;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*arr = %0x\n&quot;</span>, *arr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(arr + 1) %0x\n&quot;</span>, *(arr + <span class="hljs-number">1</span>));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p1 = %0x\n&quot;</span>, *p1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(p1 + 1) = %0x\n&quot;</span>, *(p1 + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p2 = %0x\n&quot;</span>, *p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(p2 + 1) = %0x\n&quot;</span>, *(p2 + <span class="hljs-number">1</span>));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">*arr = <span class="hljs-number">3344</span><br>*(arr + <span class="hljs-number">1</span>) <span class="hljs-number">1122</span><br>*p1 = <span class="hljs-number">3344</span><br>*(p1 + <span class="hljs-number">1</span>) = <span class="hljs-number">1122</span><br>*p2 = <span class="hljs-number">44</span><br>*(p2 + <span class="hljs-number">1</span>) = <span class="hljs-number">33</span><br></code></pre></td></tr></table></figure><p>从这个例子也可以看出，使用数组时，既可以通过下标获取数组特定位的值，也可以通过指针解引用的方法获得数组某位的值。</p><h3 id="二级指针及多级指针"><a href="#二级指针及多级指针" class="headerlink" title="二级指针及多级指针"></a>二级指针及多级指针</h3><h4 id="二级指针的定义和操作"><a href="#二级指针的定义和操作" class="headerlink" title="二级指针的定义和操作"></a>二级指针的定义和操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">0x2a</span>;<br><span class="hljs-type">int</span> *p = &amp;x;<br><span class="hljs-type">int</span> **q = &amp;p;<br></code></pre></td></tr></table></figure><p><code>p</code>的含义已经在前面解释了，那么<code>q</code>又是什么呢？</p><p><code>q</code>是一个<code>int *</code>类型的指针，也就是说<code>q</code>存储的是一个<code>int *</code>变量的地址，因此<code>q</code>也是一个指针，所以它具备前面提到的指针的特性：</p><ol><li>创建<code>q</code>时，也会开辟8个内存空间，用来存放<code>p</code>地址信息。</li><li>对<code>q</code>进行加减操作时，移动地址空间时也符合&lt;<code>(type *)(p + n)</code>即在<code>p</code>原来指向的地址的基础上增加<code>n * sizeof(type)</code>个地址空间&gt;这一个规则，只是此时的<code>type</code>指代<code>int *</code>，我们前面讨论过<code>int *</code>的长度是8字节，因此<code>q + 1</code>在内存中实际上移动了8个地址。</li></ol><p>二级指针的基本指向逻辑是q-&gt;p-&gt;x，那么<code>*q</code>是作为<code>q</code>的解引用，能够得到<code>p</code>，<code>**q</code>是对<code>*q</code>的再次解引用，得到变量<code>x</code>。</p><h4 id="对多级指针的理解"><a href="#对多级指针的理解" class="headerlink" title="对多级指针的理解"></a>对多级指针的理解</h4><p>以此类推，可以使用多级指针，例如<code>int ****</code> 就是指向 <code>int ***</code>类型数据的指针。</p><p>在二级指针之后，无论是几级指针，都必然遵循以下两条规则:</p><ul><li>创建指针<code>p</code>时开辟8个内存空间，存放指向变量的地址。</li><li>对这个指针<code>p</code>进行加减<code>p+n</code>操作时，相当于将<code>p</code>指向地址的基础上移动<code>n * 8</code>。</li></ul><p><strong>关于为什么这里移动的地址空间一定是8</strong>：多级指针必然指向另一个指针，而它指向的那个指针，都是占据8个内存空间，对于<code>(type *)(p + n)</code>，只要这个<code>type</code>是一个指针型变量，那么必然有<code>sizeof(type) = 8</code>。</p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>对于以下几行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p1 = &amp;x;<br><span class="hljs-type">int</span> **p2 = &amp;p1; <br><span class="hljs-type">int</span> ***p3 = &amp;p2;<br><span class="hljs-type">int</span> ****p4 = &amp;p2;<br></code></pre></td></tr></table></figure><ul><li><code>p1</code>、<code>p2</code>、<code>p3</code>、<code>p4</code>分别是一级、二级、三级、四级指针，各自指向<code>x</code>、<code>p1</code>、<code>p2</code>、<code>p3</code>，如果直接打印<code>p1</code>、<code>p2</code>、<code>p3</code>、<code>p4</code>，得到的结果是<code>x</code>、<code>p1</code>、<code>p2</code>、<code>p3</code>的地址。</li><li><code>*p1</code>、<code>*p2</code>、<code>*p3</code>、<code>*p4</code>分别是各自的解引用，分别得到<code>x</code>、<code>p1</code>、<code>p2</code>、<code>p3</code>。</li><li><code>**p2</code>、<code>**p3</code>、<code>**p4</code>分别是各自的二次解引用，分别得到<code>x</code>、<code>p1</code>、<code>p2</code>。</li><li>以此类推，是几级指针就可以解几次引用，比如<code>****p4 = ***p3 = **p2 = *p1 = x</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Python中List内存占用的理解</title>
    <link href="/2024/12/05/%E5%85%B3%E4%BA%8EList%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2024/12/05/%E5%85%B3%E4%BA%8EList%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><strong>思考这部分内容是因为在如下代码中遇到了问题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">link = []  <br>network = []  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rows):  <br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cols):  <br>        <span class="hljs-keyword">if</span> net_link[i][j] == <span class="hljs-number">1</span>:  <br>            link.clear()  <br>            link.append((i, j))  <br>            <span class="hljs-keyword">if</span> i &gt; j: link.append(<span class="hljs-string">&quot;high&quot;</span>)  <br>            <span class="hljs-keyword">else</span>: link.append(<span class="hljs-string">&quot;low&quot;</span>)  <br>            network.append(link)  <br></code></pre></td></tr></table></figure><p>在这个状态下，每次循环打印<code>link</code>和<code>network</code>发现<code>link</code>的值是对的，但是<code>network</code>里面的每一项都会被最新的<code>link</code>覆盖。</p><p>这是因为：每一次执行<code>network.append(link)</code>，实际上是把<code>link</code>的引用添加到<code>network</code>中，而不是创建了一份副本。</p><p>可以通过以下方法去验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 每次进入if语句执行完network.append之后，打印新添加的变量的引用信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;network[<span class="hljs-subst">&#123;times&#125;</span>]: <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>(network[times])&#125;</span>&quot;</span>)<br>times += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>根据打印可以发现，network的每个数据的引用都是一样的，也就是说，通过append添加列表，实际上是存了一份列表的地址放在network内存空间中。</p><p>因此每次<code>link</code>在清空之后重新修改，这个地址上存储的信息就会发生变化，network里的每一个元素也会发生变化。</p><p><strong>如何解决这个问题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在将link添加到network时创建link的副本，两种方法都可以</span><br>network.append(link.copy())<br>network.append(link.[:])<br></code></pre></td></tr></table></figure><p>问题研究到这里，我突然发现其实从来没有思考过python使用中内存的问题，于是就针对这一点做了一些小实验。</p><h2 id="python中整数的常量池"><a href="#python中整数的常量池" class="headerlink" title="python中整数的常量池"></a>python中整数的常量池</h2><p>在python中有一个会使用<code>常量池</code>来优化内存使用，所谓常量池就是python程序在初始化时就会开辟一块内存空间存放一些常量，对于整数型常量一般包括-5到256之间的整数。</p><p>测试代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(-<span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(-<span class="hljs-number">5</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(-<span class="hljs-number">4</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(-<span class="hljs-number">3</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(-<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">254</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">255</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">256</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">257</span>)))<br></code></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">0x24d84a9f610<br>0x24d84656870<br>0x24d84656890<br>0x24d846568b0<br>0x24d846568d0<br>0x24d84686950<br>0x24d84686970<br>0x24d84686990<br>0x24d8481cb10<br></code></pre></td></tr></table></figure><p>能够看出来从-5到256之间，一个常数占据32个地址空间。这部分地址空间除了存储常数本身，还包括<strong>引用计数</strong>，<strong>类型指针</strong>等信息，具体可以查找CPython的源码。</p><p>还可以再举一个例子测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(x)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">10</span>)))<br></code></pre></td></tr></table></figure><p>运行之后会发现两个打印是相同的。</p><h2 id="对x-10的理解"><a href="#对x-10的理解" class="headerlink" title="对x&#x3D;10的理解"></a>对x&#x3D;10的理解</h2><p>实验做到这里，我发现我对于<code>x=10</code>这样简单的创建一个变量的理解是有问题的。</p><p>在C语言中，当我输入<code>int x = 10;</code>，程序运行之后会为变量x开辟一个空间，存储的值是10；同时初始化一个指针变量<code>int *p = &amp;x</code>，指向x的地址，此时p也占据了一定的内存空间，存储的值是x的地址；接下来如果我修改<code>x = 20</code>，x的地址不会发生任何变化（也就是p的值不会变），但是x地址上存储的信息会变成20。</p><p>以上是C的初始化变量的内存状态。</p><p>但是在python中不太一样，对于下面的代码，两行的打印是同一个，一方面说明id()这个函数获取的不是元素本身的内存地址，另一方面，执行x&#x3D;10时，并不是直接保存10的值，而是保存了指向常量池中10这个常数的地址信息，因此如果修改x的参数，那么id(x)也会发生变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(x)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">10</span>)))<br><span class="hljs-comment"># 修改x的值</span><br>x = <span class="hljs-number">20</span> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 此时x指向常量池20的位置</span><br></code></pre></td></tr></table></figure><p>因此，在python中创建这样一个变量<code>x = 10</code>，本质上是<strong>创建了一个指向整数对象10的引用</strong>，通过id可以获取到对象的内存地址。</p><p>还有一个方法可以验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = a<br>c = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> c)<br></code></pre></td></tr></table></figure><p>两个的打印都是<code>True</code>，前者比较好理解，因为是直接赋值的，后者也是<code>True</code>，说明a和c本质上指向了同一个对象。</p><h2 id="列表及相关操作中的内存理解"><a href="#列表及相关操作中的内存理解" class="headerlink" title="列表及相关操作中的内存理解"></a>列表及相关操作中的内存理解</h2><p>首先，通过<code>my_list=[]</code>这种表达创建的列表是一个列表对象，因此通过<code>id(my_list)</code>可以直接获取到这个列表的地址。</p><p>接下来先看一个列表示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 初始化简单列表</span><br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list[<span class="hljs-number">0</span>])))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list[<span class="hljs-number">1</span>])))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list[<span class="hljs-number">2</span>])))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">1</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">3</span>)))<br><span class="hljs-comment"># 直接添加一常量</span><br>my_list.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list[<span class="hljs-number">3</span>])))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">4</span>)))<br><span class="hljs-comment"># 添加一个参数</span><br>x = <span class="hljs-number">5</span><br>my_list.append(x)<br><span class="hljs-built_in">print</span>(my_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list[<span class="hljs-number">4</span>])))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">5</span>)))<br><span class="hljs-comment"># 改变这个参数</span><br>x = <span class="hljs-number">6</span><br><span class="hljs-built_in">print</span>(my_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(my_list[<span class="hljs-number">4</span>])))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">6</span>)))<br></code></pre></td></tr></table></figure><p>返回显示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">0x209f5421b40<br>0x209e1186930<br>0x209e1186950<br>0x209e1186970<br>0x209e1186930<br>0x209e1186950<br>0x209e1186970<br>0x209f5421b40<br>0x209e1186990<br>0x209e1186990<br>[1, 2, 3, 4, 5]<br>0x209f5421b40<br>0x209e11869b0<br>0x209e11869b0<br>[1, 2, 3, 4, 5]<br>0x209f5421b40<br>0x209e11869b0<br>0x209e11869d0<br></code></pre></td></tr></table></figure><p>首先，在初始化列表之后，my_list会占用一个内存空间，这个列表中的每一个元素存储的都是指向常量池中对应常量的地址信息，因此单独获取每个元素的id，和单独获取对应常量的id结果是一样的。</p><p>接下来向列表中添加一个常量元素，通过打印也能看出向列表中添加的实际上是指向这个元素的地址。</p><p>然后定义一个变量x，并把x添加到my_list中，通过id获取列表中第5个元素，可以看到实际上存储的信息是存储5这个常量的地址信息，结合前面分析的<strong>初始化一个整数型变量本质上是创建了一个指向这个整数的引用</strong>，所以虽然看上去append是添加了一个变量，但是其实是添加了一个常量。</p><p>通过修改x再观察my_list也可以发现修改x对my_list没有任何影响。</p><p>接下来让my_list变得再复杂一些：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">y = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>z = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, y]<br><span class="hljs-built_in">print</span>(my_list)<br>y[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(my_list)<br>my_list.append(z)<br>my_list.append(z)<br><span class="hljs-built_in">print</span>(my_list)<br>z[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(my_list)<br></code></pre></td></tr></table></figure><p>返回显示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[1, 2, [1, 2, 3]]<br>[1, 2, [2, 2, 3]]<br>[1, 2, [2, 2, 3], [4, 5, 6], [4, 5, 6]]<br>[1, 2, [2, 2, 3], [4, 5, 0], [4, 5, 0]]<br></code></pre></td></tr></table></figure><p>这里<code>my_list</code>中的元素不仅仅是常数了，还多了列表，但是同样的，<code>my_list</code>中存储的列表也只是列表对象的地址，因此无论是列表y还是后来通过append函数添加的列表z，当它们发生变化时，<code>my_list</code>也会发生变化了，这就回到了最初遇到的问题，也就是append(list)只能添加这个列表的地址，而要想永远添加不被覆盖，需要先创造一份副本，再将副本添加<code>my_list</code>中。</p><h2 id="列表的拷贝"><a href="#列表的拷贝" class="headerlink" title="列表的拷贝"></a>列表的拷贝</h2><p>如果需要确保两个列表在内存中完全独立，可以创建列表的<strong>副本</strong>（深拷贝或浅拷贝）。</p><ul><li><strong>浅拷贝</strong>：创建一个新的列表对象，但列表中的元素仍然引用原始对象。</li><li><strong>深拷贝</strong>：创建一个新的列表对象，并递归地复制所有子对象，确保新列表与原列表完全独立。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]<br><br><span class="hljs-comment"># 浅拷贝</span><br>b = a.copy()<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)  <span class="hljs-comment"># False，a 和 b 是不同的对象</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>] <span class="hljs-keyword">is</span> b[<span class="hljs-number">2</span>])  <span class="hljs-comment"># True，浅拷贝时嵌套的列表仍然引用同一个对象</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>] <span class="hljs-keyword">is</span> b[<span class="hljs-number">1</span>])<span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 深拷贝</span><br>c = copy.deepcopy(a)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> c)  <span class="hljs-comment"># False，a 和 c 是不同的对象</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>] <span class="hljs-keyword">is</span> c[<span class="hljs-number">2</span>])  <span class="hljs-comment"># False，深拷贝时嵌套的对象也会复制</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>] <span class="hljs-keyword">is</span> c[<span class="hljs-number">1</span>])<span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>以上也仅限于可变对象，对于<code>a[0]</code>、<code>a[1]</code>这种不可变对象，无论是哪种类型的拷贝，还是引用相同的对象。</p><p>还可以使用<code>a[:]</code>的方法创建副本，与浅拷贝功能相同。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>python中的整数、字符串等都属于不可变对象，不管出现在哪里出现了几次，本质是引用的同一个对象。</li><li>list中添加或者删除操作，实际操作的都是这个对象的引用信息，所以如果这个对象是一个可变对象，对这个可变对象进行修改，会影响到其他列表。</li><li>如果想要保证列表在内存中完全独立，可以在append添加时直接创建副本，也就是对列表进行拷贝操作</li></ol>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo中插入图片的方法</title>
    <link href="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本篇内容主要介绍了Hexo中插入图片常用的几种方法及兼容Typora和Obsidian本地编辑器的方法。</p><h2 id="hexo-asset-image插件安装"><a href="#hexo-asset-image插件安装" class="headerlink" title="hexo-asset-image插件安装"></a>hexo-asset-image插件安装</h2><p>早期的hexo不支持markdown图片显示方法，所以需要<code>hexo-asset-image</code>插件，但是随着hexo的发展，hexo已经支持markdown图片显示语法了。</p><p>但是网上很多方法还停留在安装<code>hexo-asset-image</code>的教程中，事实上这个和hexo的版本有关，使用<code>hexo -v</code>，判断一下hexo的版本，我这里使用的是<code>7.3.0</code>版本，已经不需要使用该插件了。</p><p><em><strong>问题提示</strong></em></p><p>如果按照原有的教程进行安装，在安装<code>hexo-asset-image</code>会遇到以下问题</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/hexo_asset_image%E5%AE%89%E8%A3%85%E7%BB%93%E6%9E%9C.png" alt="安装hexo-asset-image遇到的问题"></p><p>npm audit是在提示该安装包有版本适配的问题，按照网上的一些说明，这个问题并不能够直接解决，事实上仍旧是安装失败，所以是存在问题的。</p><p>在这个状态下，如果继续安装hexo使用流程，运行基本文件，会发现图片无法正常显示，在本地hexo目录下public子文件夹中，查看发布的.html文件，会发现链接的图片地址是这样的：</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8F%90%E7%A4%BA.png" alt="路径错误提示"></p><p>原有代码是这样的:（这也是几种常用的图片引用方式）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片引用方法一</span>](<span class="hljs-link">test.png</span>)<br><br>![<span class="hljs-string">图片引用方法二</span>](<span class="hljs-link">test.png</span>)<br><br>![<span class="hljs-string">图片引用方法三</span>](<span class="hljs-link">test/test.png</span>)<br><br></code></pre></td></tr></table></figure><p>如果已经走到这一步了，就使用以下命令<code>npm uninstall hexo-asset-image</code>卸载，再clean后重新生成运行即可。</p><h2 id="目前常用插入图片的方法"><a href="#目前常用插入图片的方法" class="headerlink" title="目前常用插入图片的方法"></a>目前常用插入图片的方法</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><h4 id="方法一：全局资源文件夹"><a href="#方法一：全局资源文件夹" class="headerlink" title="方法一：全局资源文件夹"></a>方法一：全局资源文件夹</h4><p>把所有的图片放到一个文件夹中统一管理，优点是比较简便，且多篇文章引用同一个图片时比较方便；缺点是文章很多时，管理不方便。</p><p>具体操作方法是在source目录下新建一个image（类似）的目录，文档内使用图片直接就<code>![图片](/images/test.png)</code>引用图片。</p><h4 id="方法二：文章资源文件夹"><a href="#方法二：文章资源文件夹" class="headerlink" title="方法二：文章资源文件夹"></a>方法二：文章资源文件夹</h4><p>对于每篇文章，使用一个文件夹管理资源，当文章很多时，可以进行结构化管理。</p><p>需要进行的操作如下：</p><ol><li>修改hexo文件夹中<code>_config.yml</code>文件如下<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span> <br><span class="hljs-attr">marked:</span> <br><span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span> <br><span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li>在hexo目录中使用<code>hexo new [layout] &lt;title&gt;</code>命令创建文档，layout可以不写，先使用默认，此时在source&#x2F;_post中默认创建一个md文件和一个同名文件夹，后者用来存放图片。</li></ol><h5 id="在该方法下链接方式"><a href="#在该方法下链接方式" class="headerlink" title="在该方法下链接方式"></a>在该方法下链接方式</h5><p>常见的可以用以下语句使用图片：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片引用方法一</span>](<span class="hljs-link">test.png</span>)<br><br>![<span class="hljs-string">图片引用方法二</span>](<span class="hljs-link">test.png</span>)<br><br>![<span class="hljs-string">图片引用方法三</span>](<span class="hljs-link">test/test.png</span>)<br></code></pre></td></tr></table></figure><p>这三种方式在最后都可以在hexo server中显示，但是只有第三种方式可以兼容typora和obsidian本地编辑器（前提图片是放在同名目录下），所以使用第三种方式比较好。</p><p>不过三者运行之后的html文件内容是不一样的，显示效果也是第二种比较好看，有明显的style设计</p><p><img src="/2024/11/08/Hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/%E8%BF%90%E8%A1%8C%E5%90%8E%E7%9A%84html%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" alt="前台html文件图片路径"></p><p>第一种和第三种被解析成img格式，第二种被解析成p格式。</p><p><em><strong>如何实现typora中使用第三种方式，而页面显示中是第二种方式</strong></em></p><p>理论上，hexo对markdown的支持，体现在<code>hexo-renderer-marked</code>插件中，但是对插件中js文件进行分析，发现这个插件并没有直接作用于第三种引用方式；</p><p>于是我想到，可以自己写一个脚本文件，在hexo g时运行，通过程序把第三种引用方式解析第二种，于是在根目录下创建了<code>scripts/fix-image-paths.js</code>文件，添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;before_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Original content:&#x27;</span>, data.<span class="hljs-property">content</span>);<br>  <span class="hljs-comment">// 替换指定的 Markdown 图片路径</span><br>  data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/!\[(.*?)\]\(test\/test.png\)/g</span>, <span class="hljs-string">&#x27;![$1](test.png)&#x27;</span>);<br>  <span class="hljs-comment">// 打印替换后的内容</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Modified content:&#x27;</span>, data.<span class="hljs-property">content</span>);<br>  <span class="hljs-comment">// 返回修改后的数据</span><br>  <span class="hljs-keyword">return</span> data;<br>&#125;, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>发现打印的结果是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Original content:<br>这是一篇测试文章<br>![图片引用方法二](test.png)<br>![图片引用方法三](test.png)<br>Modified content:<br>这是一篇测试文章<br>![图片引用方法二](test.png)<br>![图片引用方法三](test.png)<br></code></pre></td></tr></table></figure><p>这说明，在执行该脚本文件之前，hexo某个脚本已经将第三种引用方式<code>![图片引用方法三](test/test.png)</code> 解析成了第一种引用方式<code>![图片引用方法三](test.png)</code>，此时再进行<code>fix-image-paths.js</code>的操作是没有意义的，因为没有目标对象，因为不确定到底是在哪个脚本文件中执行了这个操作，因此反其道而行之，把<code>![图片引用方法三](test.png)</code>，也就是第一种引用方式变成第二种<code>![图片引用方法三](test.png)</code>，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;before_post_render&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">// 打印原始内容，调试用</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Original content:&#x27;</span>, data.<span class="hljs-property">content</span>);<br>  <span class="hljs-comment">// 替换已经被转换为 &#123;% asset_img %&#125; 的标签，转回标准 Markdown 格式</span><br>  data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/![(.*?)]((.*?))/g</span>, <span class="hljs-string">&#x27;![$2]($1)&#x27;</span>);<br>  <span class="hljs-comment">// 打印修改后的内容，调试用</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Modified content:&#x27;</span>, data.<span class="hljs-property">content</span>);<br>  <span class="hljs-comment">// 返回修改后的数据</span><br>  <span class="hljs-keyword">return</span> data;<br>&#125;, <span class="hljs-number">1</span>);  <span class="hljs-comment">// 设置优先级为 1，尽早执行此钩子</span><br></code></pre></td></tr></table></figure><p>经过这里，也可以发现实际上(test&#x2F;test.png)的引用方法是先被转换成hexo传统插入图片方法<code>asset_img</code>，然后再转换成html图片显示格式，有一种可能的方法是可以直接禁用asset_img方法，或者去修改css文件，但是本人功力太差，还是上述方法比较简单快捷。</p><p>这样就可以即保证美观，又能兼容本地 typora 和 obsidian 编辑器了，完美。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[Hexo官网资料](<a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E5%85%A8%E5%B1%80%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">资源文件夹 | Hexo</a>)<br>[关于hexo-asset-image的出错的理解](<a href="https://smallsquare.github.io/Solution-to-insert-pics-in-Hexo/">安装hexo-asset-image导致Hexo插入图片无法显示的解决办法 Solution to insert pics in Hexo when hexo-asset-image is installed - SmallSquare’s Blog</a>)<br>[关于hexo-asset-image插入失败的解决思路](<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法_hexo 文章插入图片失败-CSDN博客</a>)</p>]]></content>
    
    
    <categories>
      
      <category>Tech Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
